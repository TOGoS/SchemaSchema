At a low level, the syntax can be described like this:

	word = single-quoted-string | double-quoted-string | bareword
	
	phrase = word { word }
	
	argument-list = parameterized { "," parameterized }
	
	parameterized-subject = phrase
	
	parameterized = parameterized-subject [ "(" argument-list ")" ]
	
	command-block = "=" command | "{" block "}"
	
	modifier-list = { ":" parameterized }
	
	command-subject = parameterized
	
	command = command-subject modifier-list command-block
	
	command-delimiter = ";" | "\n"
	
	block = command { command-delimiter command }

Class definitions are then built on top of commands.  A class definition
is indicated by a command where the subject's phrase starts with the word 'class'.
That command's modifiers indicate things about the class itself, and sub-commands
in that command's block define instance fields.  e.g.

	class patient hospitalization : self-keyed {
		patient ID : integer
		patient admission date : date
	}

Indexes

	class person {
		ID : integer : non-comparable : primary key  # comparison operations have no meaning, hinting that a hash index may be used
		first name : string : 'first name' index
		last name : string : 'last name' index
		birthdate : date
		
		# Explicitly declare an index 
		index 'birthdate' : tree {
			# List fields within
			birthdate
		}
	}

Define custom properties

	class-property 'all fields are silly'

	field-property 'value may be of interest to subsystem X'
	
	# Define a property that takes a value
	field-property wickedness : integer

Define custom value types
	
	type 'quux'            # Declared but not defined
	
	type 'garf' = integer  # Alias to another type
	
	type 'moof' : extends quux {
		# composite type
		coolness : integer
		title : string
	}
	
	type 'small integer' = integer(0, 255)
	
	type 'a type with type parameters' ( min coolness, max coolness ) : extends moof {
		default max coolness = 10
		# min coolness has no default so must be specified
	}  

Define modifiers as aliases

	modifier 'scrum butt' = integer    # Alias to another modifier
	modifier 'AIPK' = unsigned integer : auto increment : primary key  # Alias to multiple modifiers
	modifier 'ignore this modifier' { }   # Empty block means ignore

Foreign keys
	
	class patient {
		ID : integer : primary key component
		first name : string
		last name : string
	}
	
	class patient stay {
		# Define a foreign key:
		patient : reference(patient) {
			# foreign key = our key.
			# we could also define our key outside the reference block
			# and then not repeat the modifiers, here
			ID = patient ID : integer : primary key component
		}
		patient admission date : date : primary key component
		reason for admission : string
	}
	
	class patient incident {
		patient stay : reference(patient stay) # since key names match, no need to repeat ourselves
	}
